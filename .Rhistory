getwd()
x<-1
print(x)
x
msg<-"hello"
msg
x<-1:20
x
m<-matrix(nrow=2, ncol=3)
m
dim(m)
attributes(m)
class(m)
x<-1:10
x
y<-1,2,3,4,3,4,5
y<-(1,2,3,4,3,4,5)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
x<-list(a=1:5,b=rnorm(10))
lapply(x,mean)
y<-lapply(x,mean)
y
class(y)
b<-rnorm(10)
v
b
mean(b)
rnorm(20,1)
rnorm(100,5)
x<-1:4
lapply(x,runif)
y<-lapply(x,runif)
class(y)
x
lapply(x,runif,min=3,max=5)
x<-list(a=matrix(1:4,2,2), b=matrix(1:6,3,2))
x
lapply(x, function(elt) elt[,1])
y<-lapply(x, function(elt) elt[,1])
y[a]
y
y(a)
y[1]
y[$a]
x<-list(a=1:4,b=rnorm(10))
y<-lapply(x,mean)
z<-sapply(x,mean)
y
z
class(z)
class(y)
x<-list(a=matrix(1:4,2,2), b=matrix(4:7,2,2))
y<-sapply(x,function(elt) elt[,1])
y
class(y)
x<-list(a=matrix(1:4,2,2), b=matrix(1:5,3,2))
x<-list(a=matrix(1:4,2,2), b=matrix(1:6,3,2))
y<-sapply(x,function(elt) elt[,1])
y
class(y)
x<-matrix(rnorm(200),20,10)
x
y<-aplly(x,2,mean)
y<-apply(x,2,mean)
y
z<-apply(x,1,sum)
z
class(z)
rowsums(x)
rowSums(x)
library(datasets)
data(iris)
?iris
iris
x<-iris[iris$Species == "virginica",]
x
mean(x)
mean(x$Sepal.Length)
colMeans(iris)
apply(iris, 1, mean)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
x<-iris[,1:4]
x
mean(x)
colMeans(x)
library(datasets)
data(mtcars)
mtcars
apply(mtcars, 2, mean)
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$cyl, mtcars$mpg, mean)
with(mtcars, tapply(hp, cyl, mean))
x<-with(mtcars, tapply(hp, cyl, mean))
class(x)
x
x[4]
x[1]
x[1]-s[3]
x[1]-x[3]
y<-x[1]-x[3]
abs(y)
debug(ls)
ls
set.seed(1)
rpois(5, 2)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
set wd(D:\02 Personal\09 Coursera\datasciencecoursera\ProgrammingAssignment2)
setwd(D:\02 Personal\09 Coursera\datasciencecoursera\ProgrammingAssignment2)
setwd(D:/02 Personal/09 Coursera/datasciencecoursera/ProgrammingAssignment2)
setwd("D:/02 Personal/09 Coursera/datasciencecoursera/ProgrammingAssignment2")
getwd()
load(cachematrix.R)
x <- matrix(rnorm(16), nrow = 4)
x
cx <- makeCacheMatrix(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
invm<-NULL   #invm stores the matrix inverse
# set the matrix
set <- function(y) {
x <<- y
inv <<- NULL
}
# Get  the matrix
get <- function() x
# Set the inverse matrix
setinvm <- function(inverse) invm <<- inverse
# Get  the inverse matrix
getinvm <- function() invm
# Return the matrix
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invm <- x$getinvm()
# If the inverse is already existed, return from cache
if (!is.null(invm)) {
message("getting cached data")
return(invm)
}
# The inverse is not existed, calculate the inv matrix
data <- x$get()
invm <- solve(data, ...)
# Cache the inverse
x$setinv(invm)
# Return inv matrix
invm
}
cx <- makeCacheMatrix(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
invm<-NULL   #invm stores the matrix inverse
# set the matrix
set <- function(y) {
x <<- y
inv <<- NULL
}
# Get  the matrix
get <- function() x
# Set the inverse matrix
setinvm <- function(inverse) invm <<- inverse
# Get  the inverse matrix
getinvm <- function() invm
# Return the matrix
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invm <- x$getinvm()
# If the inverse is already existed, return from cache
if (!is.null(invm)) {
message("getting cached data")
return(invm)
}
# The inverse is not existed, calculate the inv matrix
data <- x$get()
invm <- solve(data, ...)
# Cache the inverse
x$setinvm(invm)
# Return inv matrix
invm
}
x
cx <- makeCacheMatrix(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
invm<-NULL   #invm stores the matrix inverse
# set the matrix
set <- function(y) {
x <<- y
inv <<- NULL
}
# Get  the matrix
get <- function() x
# Set the inverse matrix
setinvm <- function(inverse) invm <<- inverse
# Get  the inverse matrix
getinvm <- function() invm
# Return the matrix
list(set = set, get = get, setinv = setinvm, getinv = getinvm)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invm <- x$getinvm()
# If the inverse is already existed, return from cache
if (!is.null(invm)) {
message("getting cached data")
return(invm)
}
# The inverse is not existed, calculate the inv matrix
data <- x$get()
invm <- solve(data, ...)
# Cache the inverse
x$setinvm(invm)
# Return inv matrix
invm
}
cx <- makeCacheMatrix(x)
cx$get()
cacheSolve(cx)
cacheSolve(cx)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
invm<-NULL   #invm stores the matrix inverse
# set the matrix
set <- function(y) {
x <<- y
invm <<- NULL
}
# Get  the matrix
get <- function() x
# Set the inverse matrix
setinvm <- function(inverse) invm <<- inverse
# Get  the inverse matrix
getinvm <- function() invm
# Return the matrix
list(set = set, get = get, setinv = setinvm, getinv = getinvm)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invm <- x$getinvm()
# If the inverse is already existed, return from cache
if (!is.null(invm)) {
message("getting cached data")
return(invm)
}
# The inverse is not existed, calculate the inv matrix
data <- x$get()
invm <- solve(data, ...)
# Cache the inverse
x$setinvm(invm)
# Return inv matrix
invm
}
cacheSolve(cx)
cx
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
invm<-NULL   #invm stores the matrix inverse
# set the matrix
set <- function(y) {
x <<- y
invm <<- NULL
}
# Get  the matrix
get <- function() x
# Set the inverse matrix
setinvm <- function(inverse) invm <<- inverse
# Get  the inverse matrix
getinvm <- function() invm
# Return the matrix
list(set = set, get = get, setinv = setinvm, getinv = getinvm)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invm <- x$getinvm()
# If the inverse is already existed, return from cache
if (!is.null(invm)) {
message("getting cached data")
return(invm)
}
# The inverse is not existed, calculate the inv matrix
data <- x$get()
invm <- solve(data, ...)
# Cache the inverse
x$setinvm(invm)
# Return inv matrix
invm
}
x <- matrix(rnorm(16), nrow = 4)
x
class(x)
cx <- makeCacheMatrix(x)
class(cx)
cx
cx$get()
clss(cx$get())
class(cx$get())
cacheSolve(cx$get())
cacheSolve(x
)
x
y<-cx$get()
y
class(y)
cacheSolve(y)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
invm<-NULL   #invm stores the matrix inverse
# set the matrix
set <- function(y) {
x <<- y
invm <<- NULL
}
# Get  the matrix
get <- function() x
# Set the inverse matrix
setinvm <- function(inverse) invm <<- inverse
# Get  the inverse matrix
getinvm <- function() invm
# Return the matrix
list(set = set, get = get, setinvm = setinvm, getinvm = getinvm)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invm <- x$getinvm()
# If the inverse is already existed, return from cache
if (!is.null(invm)) {
message("getting cached data")
return(invm)
}
# The inverse is not existed, calculate the inv matrix
data <- x$get()
invm <- solve(data, ...)
# Cache the inverse
x$setinvm(invm)
# Return inv matrix
invm
}
cacheSolve(cx)
cacheSolve(y)
